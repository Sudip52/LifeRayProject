/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lftechnology.ticketbookingsystem.admin.model.impl;

import com.lftechnology.ticketbookingsystem.admin.model.Hall;
import com.lftechnology.ticketbookingsystem.admin.model.HallModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Hall service. Represents a row in the &quot;ADMN_Hall&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lftechnology.ticketbookingsystem.admin.model.HallModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HallImpl}.
 * </p>
 *
 * @author sudipshrestha
 * @see HallImpl
 * @see com.lftechnology.ticketbookingsystem.admin.model.Hall
 * @see com.lftechnology.ticketbookingsystem.admin.model.HallModel
 * @generated
 */
public class HallModelImpl extends BaseModelImpl<Hall> implements HallModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a hall model instance should use the {@link com.lftechnology.ticketbookingsystem.admin.model.Hall} interface instead.
	 */
	public static final String TABLE_NAME = "ADMN_Hall";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "hallname", Types.VARCHAR },
			{ "contact_no", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ADMN_Hall (id_ LONG not null primary key,hallname VARCHAR(75) null,contact_no VARCHAR(75) null,companyId LONG,groupId LONG)";
	public static final String TABLE_SQL_DROP = "drop table ADMN_Hall";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.lftechnology.ticketbookingsystem.admin.model.Hall"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.lftechnology.ticketbookingsystem.admin.model.Hall"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.lftechnology.ticketbookingsystem.admin.model.Hall"));

	public HallModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Hall.class;
	}

	public String getModelClassName() {
		return Hall.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("hallname", getHallname());
		attributes.put("contact_no", getContact_no());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String hallname = (String)attributes.get("hallname");

		if (hallname != null) {
			setHallname(hallname);
		}

		String contact_no = (String)attributes.get("contact_no");

		if (contact_no != null) {
			setContact_no(contact_no);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public String getHallname() {
		if (_hallname == null) {
			return StringPool.BLANK;
		}
		else {
			return _hallname;
		}
	}

	public void setHallname(String hallname) {
		_hallname = hallname;
	}

	public String getContact_no() {
		if (_contact_no == null) {
			return StringPool.BLANK;
		}
		else {
			return _contact_no;
		}
	}

	public void setContact_no(String contact_no) {
		_contact_no = contact_no;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Hall.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Hall toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Hall)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		HallImpl hallImpl = new HallImpl();

		hallImpl.setId(getId());
		hallImpl.setHallname(getHallname());
		hallImpl.setContact_no(getContact_no());
		hallImpl.setCompanyId(getCompanyId());
		hallImpl.setGroupId(getGroupId());

		hallImpl.resetOriginalValues();

		return hallImpl;
	}

	public int compareTo(Hall hall) {
		long primaryKey = hall.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Hall hall = null;

		try {
			hall = (Hall)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = hall.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Hall> toCacheModel() {
		HallCacheModel hallCacheModel = new HallCacheModel();

		hallCacheModel.id = getId();

		hallCacheModel.hallname = getHallname();

		String hallname = hallCacheModel.hallname;

		if ((hallname != null) && (hallname.length() == 0)) {
			hallCacheModel.hallname = null;
		}

		hallCacheModel.contact_no = getContact_no();

		String contact_no = hallCacheModel.contact_no;

		if ((contact_no != null) && (contact_no.length() == 0)) {
			hallCacheModel.contact_no = null;
		}

		hallCacheModel.companyId = getCompanyId();

		hallCacheModel.groupId = getGroupId();

		return hallCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", hallname=");
		sb.append(getHallname());
		sb.append(", contact_no=");
		sb.append(getContact_no());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.lftechnology.ticketbookingsystem.admin.model.Hall");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hallname</column-name><column-value><![CDATA[");
		sb.append(getHallname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contact_no</column-name><column-value><![CDATA[");
		sb.append(getContact_no());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Hall.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Hall.class
		};
	private long _id;
	private String _hallname;
	private String _contact_no;
	private long _companyId;
	private long _groupId;
	private Hall _escapedModelProxy;
}